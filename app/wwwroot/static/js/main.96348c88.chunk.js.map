{"version":3,"sources":["app/test-result.tsx","app/test-results.tsx","app/header.tsx","trx.ts","app/app.tsx","serviceWorker.ts","index.tsx"],"names":["KnownTestOutcomes","withStyles","theme","createStyles","testResult","classes","JSON","stringify","getTestResultsFromTestRun","testRun","results","map","unitTestResult","unitTest","testDefinitions","find","testDefinition","id","testId","undefined","testMethod","className","name","testName","result","outcome","duration","startTime","endTime","errorMessage","output","errorInfo","message","errorStackTrace","stackTrace","filter","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","TestResults","handleRowClick","event","rowData","togglePanel","state","testResults","this","columns","title","field","data","icons","detailPanel","onRowClick","options","search","padding","paging","toolbar","showTitle","React","Component","flexGrow","fileName","onFilePicked","AppBar","position","Toolbar","Typography","variant","onChange","style","display","type","accept","htmlFor","Tooltip","aria-label","IconButton","component","readFileText","file","a","async","fileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","toString","readAsText","fileText","readTestRun","xml","parseStringPromise","xmlObject","mapTestRun","obj","TestRun","$","Results","UnitTestResult","mapUnitTestResult","TestDefinitions","UnitTest","mapUnitTest","TestEntries","testEntries","TestEntry","mapTestEntry","ResultSummary","resultSummary","mapResultSummary","executionId","computerName","testType","testListId","relativeResultsDirectory","Output","mapOutput","ErrorInfo","Message","StackTrace","storage","Execution","execution","mapExecution","TestMethod","mapTestMethod","codeBase","adapterTypeName","testEntry","Counters","counters","mapCounters","total","executed","passed","error","timeout","aborted","inconclusive","passButRunAborted","notRunnable","notExecuted","disconnected","warning","completed","inProgress","pending","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","useState","setFileName","setTestResults","Fragment","ThemeProvider","CssBaseline","files","target","length","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96348c88.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles, WithStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nexport enum KnownTestOutcomes { Passed, Failed };\n\nexport interface TestResult {\n  id: string;\n  testRun?: string;\n  testName?: string;\n  result?: KnownTestOutcomes | string;\n  duration?: string;\n  computerName?: string;\n  startTime?: string;\n  endTime?: string;\n  errorMessage?: string;\n  errorStackTrace?: string;\n}\n\nconst styles = (theme: Theme) => createStyles({\n  //\n});\n\nexport interface OwnProps {\n  testResult: TestResult\n};\n\nexport type Props = OwnProps & WithStyles<typeof styles>;\n\nexport const TestResultComponent: React.FunctionComponent<Props> = ({ testResult, classes }) => (\n  <pre>\n    <code>\n      {JSON.stringify(testResult, null, 2)}\n    </code>\n  </pre>\n);\n\nexport default withStyles(styles)(TestResultComponent);\n","import React, { forwardRef } from 'react';\nimport { withStyles, WithStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport MaterialTable from \"material-table\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport { TestRun } from '../trx';\nimport TestResultComponent, { TestResult } from './test-result';\n\nexport const getTestResultsFromTestRun = (testRun: TestRun) => {\n  const testResults = testRun.results.map(unitTestResult => {\n    const unitTest = testRun.testDefinitions.find(testDefinition => testDefinition.id === unitTestResult.testId);\n\n    if (unitTest === undefined) { return undefined; }\n\n    const testResult: TestResult = {\n      id: `${unitTest.testMethod?.className}${unitTest.name}`,\n      testRun: testRun.name,\n      testName: unitTest.name,\n      result: unitTestResult.outcome,\n      duration: unitTestResult.duration,\n      startTime: unitTestResult.startTime,\n      endTime: unitTestResult.endTime,\n      errorMessage: unitTestResult.output?.errorInfo?.message,\n      errorStackTrace: unitTestResult.output?.errorInfo?.stackTrace\n    };\n\n    return testResult;\n  });\n\n  return testResults.filter(testResult => testResult !== undefined) as TestResult[];\n};\n\nconst styles = (theme: Theme) => createStyles({\n  //\n});\n\nconst tableIcons = {\n  Add: forwardRef<SVGSVGElement>((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef<SVGSVGElement>((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef<SVGSVGElement>((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef<SVGSVGElement>((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef<SVGSVGElement>((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef<SVGSVGElement>((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef<SVGSVGElement>((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef<SVGSVGElement>((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef<SVGSVGElement>((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef<SVGSVGElement>((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef<SVGSVGElement>((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef<SVGSVGElement>((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nexport interface OwnProps {\n  testResults: TestResult[];\n}\nexport interface State { }\n\nexport type Props = OwnProps & WithStyles<typeof styles>;\n\nexport class TestResults extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      //\n    };\n  }\n\n  handleRowClick = (event?: React.MouseEvent, rowData?: TestResult, togglePanel?: (panelIndex?: number) => void) => {\n    if (togglePanel !== undefined) {\n      togglePanel();\n    }\n  }\n\n  render() {\n    const { testResults } = this.props;\n\n    return (\n      <MaterialTable\n        columns={[\n          { title: \"Result\", field: \"result\" },\n          { title: \"Test Name\", field: \"testName\" },\n          { title: \"ID\", field: \"id\" },\n        ]}\n        data={testResults}\n        icons={tableIcons}\n        detailPanel={testResult => <TestResultComponent testResult={testResult} />}\n        onRowClick={this.handleRowClick}\n        options={{\n          search: false,\n          padding: 'dense',\n          paging: false,\n          toolbar: false,\n          showTitle: false\n        }}\n      />\n    );\n  }\n}\n\nexport default withStyles(styles)(TestResults);\n\n\n\n","import React from 'react';\nimport { withStyles, WithStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport FolderOpen from '@material-ui/icons/FolderOpen';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst styles = (theme: Theme) => createStyles({\n  title: {\n    flexGrow: 1\n  }\n});\n\nexport interface OwnProps {\n  fileName: string;\n  onFilePicked: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type Props = OwnProps & WithStyles<typeof styles>;\n\nexport const Header: React.FunctionComponent<Props> = ({ classes, fileName, onFilePicked }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" className={classes.title}>\n        {fileName}\n      </Typography>\n\n      <input onChange={onFilePicked} style={{ display: 'none' }} id=\"file-picker\" type=\"file\" accept=\".trx\" />\n      <label htmlFor=\"file-picker\">\n        <Tooltip title=\"Open\" aria-label=\"open\">\n          <IconButton component=\"span\">\n            <FolderOpen />\n          </IconButton>\n        </Tooltip>\n      </label>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default withStyles(styles)(Header);\n","import { parseStringPromise } from 'xml2js';\n\nconst readFileText = async (file: File) => {\n  const fileReader = new FileReader();\n\n  const fileText = await new Promise<string>((resolve, reject) => {\n    fileReader.onerror = () => {\n      fileReader.abort();\n      reject(new DOMException(\"Error reading file\"));\n    };\n\n    fileReader.onload = () => {\n      resolve(fileReader.result?.toString());\n    };\n\n    fileReader.readAsText(file);\n  });\n\n  return fileText;\n}\n\nexport const readTestRun = async (file: File) => {\n  const xml = await readFileText(file);\n  const xmlObject = await parseStringPromise(xml);\n  const testRun = mapTestRun(xmlObject);\n\n  return testRun;\n};\n\nconst mapTestRun = (obj: any) => {\n  if (!obj.TestRun) { return undefined; }\n\n  const testRun = {} as TestRun;\n\n  testRun.id = obj.TestRun.$.id;\n  testRun.name = obj.TestRun.$.name;\n\n  if (obj.TestRun.Results) {\n    testRun.results = obj.TestRun.Results[0].UnitTestResult.map(mapUnitTestResult);\n  }\n\n  if (obj.TestRun.TestDefinitions) {\n    testRun.testDefinitions = obj.TestRun.TestDefinitions[0].UnitTest.map(mapUnitTest);\n  }\n\n  if (obj.TestRun.TestEntries) {\n    testRun.testEntries = obj.TestRun.TestEntries[0].TestEntry.map(mapTestEntry);\n  }\n\n  if (obj.TestRun.ResultSummary) {\n    testRun.resultSummary = mapResultSummary(obj.TestRun.ResultSummary[0]);\n  }\n\n  return testRun as TestRun;\n};\n\nconst mapUnitTestResult = (obj: any) => {\n  const unitTestResult = {} as UnitTestResult;\n\n  unitTestResult.executionId = obj.$.executionId;\n  unitTestResult.testId = obj.$.testId;\n  unitTestResult.testName = obj.$.testName;\n  unitTestResult.computerName = obj.$.computerName;\n  unitTestResult.duration = obj.$.duration;\n  unitTestResult.startTime = obj.$.startTime;\n  unitTestResult.endTime = obj.$.endTime;\n  unitTestResult.testType = obj.$.testType;\n  unitTestResult.outcome = obj.$.outcome;\n  unitTestResult.testListId = obj.$.testListId;\n  unitTestResult.relativeResultsDirectory = obj.$.relativeResultsDirectory;\n\n  if (obj.Output) {\n    unitTestResult.output = mapOutput(obj.Output);\n  }\n\n  return unitTestResult as UnitTestResult;\n};\n\nconst mapOutput = (obj: any) => {\n  const errorInfo = {} as ErrorInfo;\n\n  errorInfo.message = obj[0].ErrorInfo[0].Message[0];\n  errorInfo.stackTrace = obj[0].ErrorInfo[0].StackTrace[0];\n\n  const output: Output = {\n    errorInfo\n  };\n\n  return output;\n};\n\nconst mapUnitTest = (obj: any) => {\n  const unitTest = {} as UnitTest;\n\n  unitTest.id = obj.$.id;\n  unitTest.name = obj.$.name;\n  unitTest.storage = obj.$.storage;\n\n  if (obj.Execution) {\n    unitTest.execution = mapExecution(obj.Execution[0]);\n  }\n\n  if (obj.TestMethod) {\n    unitTest.testMethod = mapTestMethod(obj.TestMethod[0]);\n  }\n\n  return unitTest as UnitTest;\n};\n\nconst mapExecution = (obj: any) => {\n  const execution = {} as Execution;\n\n  execution.id = obj.$.id;\n\n  return execution;\n};\n\nconst mapTestMethod = (obj: any) => {\n  const testMethod = {} as TestMethod;\n\n  testMethod.codeBase = obj.$.codeBase;\n  testMethod.adapterTypeName = obj.$.adapterTypeName;\n  testMethod.className = obj.$.className;\n  testMethod.name = obj.$.name;\n\n  return testMethod;\n};\n\nconst mapTestEntry = (obj: any) => {\n  const testEntry = {} as TestEntry;\n\n  testEntry.testId = obj.$.testId;\n  testEntry.executionId = obj.$.executionId;\n\n  return testEntry;\n};\n\nconst mapResultSummary = (obj: any) => {\n  const resultSummary = {} as ResultSummary;\n\n  resultSummary.outcome = obj.$.outcome;\n\n  if (obj.Counters) {\n    resultSummary.counters = mapCounters(obj.Counters[0]);\n  }\n\n  return resultSummary;\n};\n\nconst mapCounters = (obj: any) => {\n  const counters = {} as Counters;\n\n  counters.total = obj.$.total;\n  counters.executed = obj.$.executed;\n  counters.passed = obj.$.passed;\n  counters.error = obj.$.error;\n  counters.timeout = obj.$.timeout;\n  counters.aborted = obj.$.aborted;\n  counters.inconclusive = obj.$.inconclusive;\n  counters.passButRunAborted = obj.$.passButRunAborted;\n  counters.notRunnable = obj.$.notRunnable;\n  counters.notExecuted = obj.$.notExecuted;\n  counters.disconnected = obj.$.disconnected;\n  counters.warning = obj.$.warning;\n  counters.completed = obj.$.completed;\n  counters.inProgress = obj.$.inProgress;\n  counters.pending = obj.$.pending;\n\n  return counters;\n};\n\nexport interface TestRun {\n  id: string;\n  name: string;\n  results: UnitTestResult[];\n  testDefinitions: UnitTest[];\n  testEntries: TestEntry[];\n  resultSummary: ResultSummary;\n}\n\nexport interface Times {\n  creation: string;\n  queuing: string;\n  start: string;\n  finish: string;\n}\n\nexport interface UnitTestResult {\n  executionId: string;\n  testId: string;\n  testName: string;\n  computerName?: string;\n  duration?: string;\n  startTime?: string;\n  endTime?: string;\n  testType?: string;\n  outcome?: string;\n  testListId?: string;\n  relativeResultsDirectory?: string;\n  output?: Output;\n}\n\nexport interface Output {\n  errorInfo?: ErrorInfo\n}\n\nexport interface ErrorInfo {\n  message?: string;\n  stackTrace?: string;\n}\n\nexport interface UnitTest {\n  id?: string;\n  name?: string;\n  storage?: string;\n  execution?: Execution;\n  testMethod?: TestMethod;\n}\n\nexport interface Execution {\n  id?: string;\n}\n\nexport interface TestMethod {\n  codeBase?: string;\n  adapterTypeName?: string;\n  className?: string;\n  name?: string;\n}\n\nexport interface TestEntry {\n  testId?: string;\n  executionId?: string;\n}\n\nexport interface ResultSummary {\n  outcome?: string;\n  counters?: Counters;\n}\n\nexport interface Counters {\n  total?: number;\n  executed?: number;\n  passed?: number;\n  error?: number;\n  timeout?: number;\n  aborted?: number;\n  inconclusive?: number;\n  passButRunAborted?: number;\n  notRunnable?: number;\n  notExecuted?: number;\n  disconnected?: number;\n  warning?: number;\n  completed?: number;\n  inProgress?: number;\n  pending?: number;\n}\n","import React, { useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport TestResults, { getTestResultsFromTestRun } from './test-results';\nimport Header from './header';\nimport { readTestRun } from '../trx';\nimport { TestResult } from './test-result';\n\nconst App: React.FC = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  const [fileName, setFileName] = useState<string>('trxy');\n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n\n  const handleFilePicked = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (files && files.length > 0) {\n      const file = files[0];\n      const testRun = await readTestRun(file);\n      const testResults = testRun === undefined\n        ? [] as TestResult[]\n        : getTestResultsFromTestRun(testRun);\n\n      console.log('read test results: ', testResults);\n      setFileName(file.name);\n      setTestResults(testResults);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {/* <Container maxWidth=\"lg\"> */}\n          <Header fileName={fileName} onFilePicked={handleFilePicked} />\n          <TestResults testResults={testResults} />\n        {/* </Container> */}\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}